name: Build and Release IK Library

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-on-linux:
    name: Build for Linux and Windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # Restore cached godot-cpp build artifacts (Linux)
      - name: Cache godot-cpp build (Linux)
        uses: actions/cache@v3
        with:
          path: godot-cpp/bin
          key: ${{ runner.os }}-godot-cpp-${{ hashFiles('godot-cpp/**') }}
          restore-keys: |
            ${{ runner.os }}-godot-cpp-

      - name: Install build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y scons g++ zip mingw-w64 zip

      - name: Run SCons for Linux
        run: scons platform=linux

      - name: Run SCons for Windows
        run: scons platform=windows

      # - name: Run SCons for Android TODO: Add android-sdk
      #   run: scons platform=android

      - name: Zip godot_project/addons (Linux)
        run: zip -r addons-linux.zip godot_project/addons

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: addons-linux.zip
          path: addons-linux.zip

  build-macos:
    name: Build for macOS and iOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Restore cached godot-cpp build artifacts (macOS)
      - name: Cache godot-cpp build (macOS)
        uses: actions/cache@v4
        with:
          path: godot-cpp/bin
          key: ${{ runner.os }}-godot-cpp-${{ hashFiles('godot-cpp/**') }}
          restore-keys: |
            ${{ runner.os }}-godot-cpp-

      - name: Install build dependencies (macOS)
        run: brew install scons

      - name: Run SCons for macOS
        run: scons platform=macos

      - name: Run SCons for iOS
        run: scons platform=ios

      - name: Zip godot_project/addons (macOS)
        run: zip -r addons-macos.zip godot_project/addons

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: addons-macos.zip
          path: addons-macos.zip

  release:
    name: Create GitHub Release with Combined Artifacts
    needs: [build-on-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Create directories for artifacts
        run: |
          mkdir -p artifacts
          mkdir -p combined_addons/linux
          mkdir -p combined_addons/macos
          mkdir -p release

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: addons-linux.zip
          path: artifacts

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: addons-macos.zip
          path: artifacts

      - name: Unzip and organize artifacts
        run: |
          unzip artifacts/addons-linux.zip -d combined_addons/linux
          unzip artifacts/addons-macos.zip -d combined_addons/macos
          cp -r combined_addons/macos/* release/
          cp -r combined_addons/linux/* release/

      - name: Create combined ZIP file
        run: zip -r release.zip release/*

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload combined asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip
